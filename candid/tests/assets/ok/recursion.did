type A = B;
type B = opt A;
type list = opt node;
type node = record { "head" : nat; "tail" : list };
type s = service { "f" : t; "g" : (list) -> (B, tree, stream) };
type stream = opt record { "head" : nat; "next" : func () -> (stream) query };
type t = func (s) -> ();
type tree = variant {
  "branch" : record { "val" : int; "left" : tree; "right" : tree };
  "leaf" : int;
};
service : s
