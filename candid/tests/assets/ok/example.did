type List = opt record { "head" : int; "tail" : List };
type broker = service {
  "find" : (text) -> (service { "up" : () -> (); "current" : () -> (nat32) });
};
type f = func (List, func (int32) -> (int64)) -> (opt List);
type my_type = principal;
type nested = record {
  0 : nat;
  1 : nat;
  2 : record { nat; int };
  3 : record { 0 : nat; 42 : nat; 43 : nat8 };
  40 : nat;
  41 : variant { 42; "A"; "B"; "C" };
  42 : nat;
};
service : {
  "f" : (vec nat8, opt bool) -> () oneway;
  "g" : (my_type, List, opt List, nested) -> (int, broker) query;
  "h" : (vec opt text, variant { "A" : nat; "B" : opt text }, opt List) -> (
      record { 42 : record {}; "id" : nat },
    );
  "i" : f;
}
