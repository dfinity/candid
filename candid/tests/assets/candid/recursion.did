type A = B;
type B = opt A;
type node = record {head:nat; tail:list};
type list = opt node;
type tree = variant {
  leaf : int;
  branch : record { left : tree; val : int; right : tree };
};
type s = service { f : t; g : (list) -> (B,tree,stream); };
type t = func (server : s) -> ();
type stream = opt record {head:nat; next:func ()-> (stream) query};

service A : s
