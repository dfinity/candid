use super::value::{IDLField, IDLValue, IDLArgs};
use super::types::{IDLType, PrimType, Label, TypeField, FuncType, FuncMode, Binding, Dec, IDLProg};
use super::lexer::{Token, LexicalError, TmpIDLField, error};
use crate::{idl_hash, Principal};

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;
    enum Token {
        "number" => Token::Number(<String>),
        "bool" => Token::Boolean(<bool>),
        "text" => Token::Text(<String>),
        "id" => Token::Id(<String>),
        "null" => Token::Null,
        "opt" => Token::Opt,
        "vec" => Token::Vec,
        "record" => Token::Record,
        "variant" => Token::Variant,
        "func" => Token::Func,
        "service" => Token::Service,
        "oneway" => Token::Oneway,
        "query" => Token::Query,
        "blob" => Token::Blob,
        "type" => Token::Type,
        "import" => Token::Import,
        "principal" => Token::Principal,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "=" => Token::Equals,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "," => Token::Comma,
        ";" => Token::Semi,
        ":" => Token::Colon,
        "->" => Token::Arrow,
    }
}


// Value
pub Args: IDLArgs = "(" <SepBy<Arg, ",">> ")" => IDLArgs { args: <> };

pub Arg: IDLValue = {
    "bool" => IDLValue::Bool(<>),
    "+" <"number"> => IDLValue::Number(<>),
    "-" <"number"> => IDLValue::Number(format!("-{}", <>)),
    "number" => IDLValue::Number(<>),
    "text" => IDLValue::Text(<>),
    "null" => IDLValue::Null,
    "opt" <Arg> => IDLValue::Opt(Box::new(<>)),
    "vec" "{" <SepBy<Arg, ";">> "}" => IDLValue::Vec(<>),
    "record" "{" <SepBy<RecordField, ";">> "}" => {
        let mut id: u32 = 0;
        let mut fs: Vec<IDLField> = <>.iter().map(|f| {
          if f.has_id {
            id = f.inner.id + 1;
            f.inner.clone()
          } else {
            id = id + 1;
            IDLField { id: id - 1, val: f.inner.val.clone() }
          }
        }).collect();
        fs.sort_unstable_by_key(|IDLField { id, .. }| *id);
        IDLValue::Record(fs)
     },
    "variant" "{" <VariantField> "}" => IDLValue::Variant(Box::new(<>), 0),
    "principal" <"text"> =>? Ok(IDLValue::Principal(Principal::from_text(<>).map_err(error)?)),
}

Field: IDLField = {
    <n:"number"> "=" <v:Arg> =>? Ok(IDLField { id: n.parse::<u32>().map_err(|_| error("field number out of u32 range"))?, val: v }),
    <n:Name> "=" <v:Arg> => IDLField { id: idl_hash(&n), val: v },
}

VariantField: IDLField = {
    Field => <>,
    Name => IDLField { id: idl_hash(&<>), val: IDLValue::Null },
    "number" =>? Ok(IDLField { id: <>.parse::<u32>().map_err(|_| error("field number out of u32 range"))?, val: IDLValue::Null }),
}

RecordField: TmpIDLField = {
    Field => TmpIDLField { has_id: true, inner: <> },
    Arg => TmpIDLField { has_id: false, inner: IDLField { id:0, val:<> } },
}

// Type
pub Typ: IDLType = {
    PrimTyp => <>,
    "opt" <Typ> => IDLType::OptT(Box::new(<>)),
    "vec" <Typ> => IDLType::VecT(Box::new(<>)),
    "blob" => IDLType::VecT(Box::new(IDLType::PrimT(PrimType::Nat8))),
    "record" "{" <SepBy<RecordFieldTyp, ";">> "}" => {
        let mut id: u32 = 0;
        let mut fs: Vec<TypeField> = <>.iter().map(|f| {
          let label = match f.label {
              Label::Unnamed(_) => { id = id + 1; Label::Unnamed(id - 1) },
              ref l => { id = l.get_id() + 1; l.clone() },
          };
          TypeField { label, typ: f.typ.clone() }
        }).collect();
        fs.sort_unstable_by_key(|TypeField { label, .. }| label.get_id());
        IDLType::RecordT(fs)
    },
    "variant" "{" <SepBy<VariantFieldTyp, ";">> "}" => {
        let mut fs = <>;
        fs.sort_unstable_by_key(|TypeField { label, .. }| label.get_id());
        IDLType::VariantT(fs)
    },
    "func" <FuncTyp> => IDLType::FuncT(<>),
    "service" <ActorTyp> => IDLType::ServT(<>),
    "principal" => IDLType::PrincipalT,
}

PrimTyp: IDLType = {
    "null" => IDLType::PrimT(PrimType::Null),
    "id" => {
      match PrimType::str_to_enum(&<>) {
        Some(p) => IDLType::PrimT(p),
        None => IDLType::VarT(<>),
      }
    },
}

FieldTyp: TypeField = {
    <n:"number"> ":" <t:Typ> =>? Ok(TypeField { label: Label::Id(n.parse::<u32>().map_err(|_| error("field number out of u32 range"))?), typ: t }),
    <n:Name> ":" <t:Typ> => TypeField { label: Label::Named(n), typ: t },
}

RecordFieldTyp: TypeField = {
    FieldTyp => <>,
    Typ => TypeField { label: Label::Unnamed(0), typ: <> },
}

VariantFieldTyp: TypeField = {
    FieldTyp => <>,
    Name => TypeField { label: Label::Named(<>), typ: IDLType::PrimT(PrimType::Null) },
    "number" =>? Ok(TypeField { label: Label::Id(<>.parse::<u32>().map_err(|_| error("field number out of u32 range"))?), typ: IDLType::PrimT(PrimType::Null) }),
}

FuncTyp: FuncType = {
    "(" <args:SepBy<ArgTyp, ",">> ")" "->" "(" <rets:SepBy<ArgTyp, ",">> ")" <modes:FuncMode*> =>
        FuncType { modes, args, rets },
}

ArgTyp: IDLType = {
    Typ => <>,
    Name ":" <Typ> => <>,
}

FuncMode: FuncMode = {
    "oneway" => FuncMode::Oneway,
    "query" => FuncMode::Query,
}

ActorTyp: Vec<Binding> = {
    "{" <SepBy<MethTyp, ";">> "}" => <>
}

MethTyp: Binding = {
    <n:Name> ":" <f:FuncTyp> => Binding { id: n, typ: IDLType::FuncT(f) },
    <n:Name> ":" <id:"id"> => Binding { id: n, typ: IDLType::VarT(id) },
}

// Type declarations
Def: Dec = {
    "type" <id:"id"> "=" <t:Typ> => Dec::TypD(Binding { id: id, typ: t }),
    "import" <"text"> => Dec::ImportD(<>),
}

Actor: IDLType = {
    "service" "id"? ":" <t:ActorTyp> => IDLType::ServT(t),
    "service" "id"? ":" <t:"id"> => IDLType::VarT(t),
}

pub IDLProg: IDLProg = {
    <decs:SepBy<Def, ";">> <actor:Actor?> => IDLProg { decs, actor }
}

// Common util
Name: String = {
    "id" => <>,
    "text" => <>,
}

// Also allows trailing separator
SepBy<T, S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
