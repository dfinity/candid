use candid::parser::value::{IDLField, IDLValue, IDLArgs};
use candid::parser::typing::check_unique;
use super::token::{Token, error2, LexicalError, Span, Spanned};
use candid::{Principal, types::Label};
use super::command::{Command, Value};

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;
    enum Token {
        "decimal" => Token::Decimal(<String>),
        "hex" => Token::Hex(<String>),
        "float" => Token::Float(<String>),
        "bool" => Token::Boolean(<bool>),
        "text" => Token::Text(<String>),
        "id" => Token::Id(<String>),
        "null" => Token::Null,
        "opt" => Token::Opt,
        "vec" => Token::Vec,
        "record" => Token::Record,
        "variant" => Token::Variant,
        "func" => Token::Func,
        "service" => Token::Service,
        "oneway" => Token::Oneway,
        "query" => Token::Query,
        "blob" => Token::Blob,
        "type" => Token::Type,
        "import" => Token::Import,
        "export" => Token::Export,
        "principal" => Token::Principal,
        "call" => Token::Call,
        "config" => Token::Config,
        "show" => Token::Show,
        "assert" => Token::Assert,
        "let" => Token::Let,
        "identity" => Token::Identity,
        "sign" => Token::Sign(<char>),
        "=" => Token::Equals,
        "==" => Token::TestEqual,
        "!=" => Token::NotEqual,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "," => Token::Comma,
        "." => Token::Dot,
        ";" => Token::Semi,
        ":" => Token::Colon,
        "->" => Token::Arrow,
    }
}

// Command
pub Command: Command = {
    "call" <canister:Sp<Name>> "."? => {
         let canister = Spanned { span: canister.1.clone(), value: canister.0 };
         Command::Call{canister, method: "".to_string(), args: Vec::new()}
    },
    "call" <canister:Sp<Name>> "." <method:Name> => {
         let canister = Spanned { span: canister.1.clone(), value: canister.0 };    
         Command::Call{canister, method, args: Vec::new()}
    },
    "call" <canister:Sp<Name>> "." <method:Name> "(" <args: SepBy<Value, ",">> ")"? => {
         let canister = Spanned { span: canister.1.clone(), value: canister.0 };    
         Command::Call{canister, method, args}
    },
    "config" <Text> => Command::Config(<>),
    "show" <Value> => Command::Show(<>),
    "assert" <left:Value> "==" <right:Value> => Command::Assert(left, right),
    "let" <id:"id"> "=" <val:Value> => Command::Let(id, val),
    "export" <Text> => Command::Export(<>),
    "import" <id:"id"> "=" <uri:Sp<Text>> =>? {
         let principal = Principal::from_text(&uri.0).map_err(|e| error2(e, uri.1))?;
         Ok(Command::Import(id, principal))
    },
    "identity" <"id"> => Command::Identity(<>),
}

Value: Value = {
  Arg => Value::Candid(<>),
  <v:Var> <mut vs:("." <Var>)*> => {
     let mut res = Vec::with_capacity(vs.len() + 1);
     res.push(v);
     res.append(&mut vs);
     Value::Path(res)
  },
}

Var: String = {
     "id" => <>,
}

// Value
Args: IDLArgs = "(" <SepBy<AnnVal, ",">> ")" => IDLArgs { args: <> };

Arg: IDLValue = {
    "bool" => IDLValue::Bool(<>),
    NumLiteral => <>,
    Text => IDLValue::Text(<>),
    Bytes => {
        let values: Vec<_> = <>.into_iter().map(|v| IDLValue::Nat8(v)).collect();
        IDLValue::Vec(values)
    },
    "null" => IDLValue::Null,
    "opt" <Arg> => IDLValue::Opt(Box::new(<>)),
    "vec" "{" <SepBy<AnnVal, ";">> "}" => IDLValue::Vec(<>),
    "record" "{" <Sp<SepBy<RecordField, ";">>> "}" =>? {
        let mut id: u32 = 0;
        let span = <>.1.clone();
        let mut fs: Vec<IDLField> = <>.0.into_iter().map(|f| {
          match f.id {
            Label::Unnamed(_) => {
              id = id + 1;
              IDLField { id: Label::Unnamed(id - 1), val: f.val }
            }
            _ => {
              id = f.id.get_id() + 1;
              f
            }
          }
        }).collect();
        fs.sort_unstable_by_key(|IDLField { id, .. }| id.get_id());
        check_unique(fs.iter().map(|f| &f.id)).map_err(|e| error2(e, span))?;
        Ok(IDLValue::Record(fs))
    },
    "variant" "{" <VariantField> "}" => IDLValue::Variant(Box::new(<>), 0),
    "principal" <Sp<Text>> =>? Ok(IDLValue::Principal(Principal::from_text(&<>.0).map_err(|e| error2(e, <>.1))?)),
    "service" <Sp<Text>> =>? Ok(IDLValue::Service(Principal::from_text(&<>.0).map_err(|e| error2(e, <>.1))?)),
    "func" <id:Sp<Text>> "." <meth:Name> =>? {
      let id = Principal::from_text(&id.0).map_err(|e| error2(e, id.1))?;
      Ok(IDLValue::Func(id, meth))
    },
    "(" <AnnVal> ")" => <>,
}

Text: String = {
    Sp<"text"> =>? {
        if std::str::from_utf8(<>.0.as_bytes()).is_err() {
          Err(error2("Not valid unicode text", <>.1))
        } else {
          Ok(<>.0)
        }
    }
}

Bytes: Vec<u8> = {
    "blob" <"text"> => <>.into_bytes(),
}

Number: String = {
    "decimal" => <>,
    // "hex" => num_bigint::BigInt::parse_bytes(<>.as_bytes(), 16).unwrap().to_str_radix(10),
}

AnnVal: IDLValue = {
    <Arg> => <>,
    //<arg:Sp<Arg>> ":" <typ:Sp<Typ>> =>? {
    //    let env = TypeEnv::new();
    //    let typ = env.ast_to_type(&typ.0).map_err(|e| error2(e, typ.1))?;
    //    arg.0.annotate_type(true, &env, &typ).map_err(|e| error2(e, arg.1))
    //}
}

NumLiteral: IDLValue = {
    <sign:"sign"?> <n:Number> => {
        let num = match sign {
            Some('-') => format!("-{}", n),
            _ => n,
        };
        IDLValue::Number(num)
    },
    <sign:"sign"?> <n:Sp<"float">> =>? {
        let span = n.1.clone();
        let num = match sign {
            Some('-') => format!("-{}", n.0),
            _ => n.0,
        };
        let f = num.parse::<f64>().map_err(|_| error2("not a float", span))?;
        Ok(IDLValue::Float64(f))
    },
}

FieldId: u32 = {
    Sp<"decimal"> =>? <>.0.parse::<u32>().map_err(|_| error2("field id out of u32 range", <>.1)),
    Sp<"hex"> =>? u32::from_str_radix(&<>.0, 16).map_err(|_| error2("field id out of u32 range", <>.1)),
}

Field: IDLField = {
    <n:FieldId> "=" <v:AnnVal> =>? Ok(IDLField { id: Label::Id(n), val: v }),
    <n:Name> "=" <v:AnnVal> => IDLField { id: Label::Named(n), val: v },
}

VariantField: IDLField = {
    Field => <>,
    Name => IDLField { id: Label::Named(<>), val: IDLValue::Null },
    FieldId =>? Ok(IDLField { id: Label::Id(<>), val: IDLValue::Null }),
}

RecordField: IDLField = {
    Field => <>,
    AnnVal => IDLField { id: Label::Unnamed(0), val:<> },
}

// Common util
Name: String = {
    "id" => <>,
    Text => <>,
}

// Also allows trailing separator
#[inline]
SepBy<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

#[inline]
Sp<T>: (T, Span) =
    <l: @L> <t: T> <r: @R> => (t, l..r);
