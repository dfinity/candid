type _anon_class_23_1 = service {
  text_in : (text) -> ();
  nat_in : (int) -> ();
  variant_out : () -> (Result);
  variant_in : (Result) -> ();
  anon_record_out : () -> (
    vec record {
      DeviceAlias;
      PublicKey;
    }
  );
  anon_record_in : (DeviceAlias, opt PublicKey) -> (bool);

  anon_vec_record_out : () -> (vec EncryptedNote);
  anon_vec_out : () -> (vec PublicKey);
  anon_vec_record_in : (vec EncryptedNote) -> ();
  anon_vec_in : (vec PublicKey) -> ();

  oneway_fn : (DeviceAlias) -> () oneway;

  struct_in : (option : GetCiphertextError) -> ();
  struct_out : () -> (GetCiphertextError);

  opt_struct_in : (option : opt GetCiphertextError) -> ();
  opt_struct_out : () -> (opt GetCiphertextError);

  nested_three_in : (option : opt opt opt nat) -> ();
  nested_three_out : () -> (opt opt opt nat);

  nested_twice_in : (option : opt opt nat) -> ();
  nested_twice_out : () -> (opt opt nat);

  opt_single_in : (option : opt nat) -> ();
  opt_single_out : () -> (opt nat);

  nested_struct_in : (option : EncryptedNote) -> ();
  nested_struct_out : () -> (EncryptedNote);

  opt_nested_struct_in : (option : opt EncryptedNote) -> ();
  opt_nested_struct_out : () -> (opt EncryptedNote);
};
type Result = variant {
  err : GetCiphertextError;
  ok : Ciphertext;
};
type PublicKey = text;
type GetCiphertextError = variant {
  notFound;
  notSynced;
};
type ComplexVariant = variant {
  a : nat;
  b : bool;
};
type EncryptedNote = record {
  encrypted_text : EncryptedText;
  id : nat;
};
type EncryptedText = record {
  sender : opt text;
  message : text;
};
type DeviceAlias = text;
type Ciphertext = text;
service : () -> _anon_class_23_1;
