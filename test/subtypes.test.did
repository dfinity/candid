/*
Encoding tests for subtype tests in decoders

Corresponding to spec version version 0.1.4

This test file contains tests for the subtype check that decoders are expected
to perform upon references.

The shortest way to trigger a test for `t1 <: t2` is to pass `(func () -> (t1))`
and decode at type `(opt func () -> (t2))`, and check if the result is a
`reference` or `null`.

The patterns are hence

assert blob "DIDL\01\6a\00\01XX00\01\00\01\01\00\00"
   == "(opt func \"aaaaa-aa\".\"\")" : (opt func () -> (t2)) "t1 <: t2";

assert blob "DIDL\01\6a\00\01XX\00\01\00\01\01\00\00"
   == "(null)" : (opt func () -> (t2)) "t1 </: t2";

where XX is the type index of t1.
*/

// some reflexive cases
assert blob "DIDL\01\6a\00\01\7f\00\01\00\01\01\00\00"
   == "(opt func \"aaaaa-aa\".\"\")" : (opt func () -> (null)) "null <: null";
assert blob "DIDL\01\6a\00\01\7e\00\01\00\01\01\00\00"
   == "(opt func \"aaaaa-aa\".\"\")" : (opt func () -> (bool)) "bool <: bool";
assert blob "DIDL\01\6a\00\01\7d\00\01\00\01\01\00\00"
   == "(opt func \"aaaaa-aa\".\"\")" : (opt func () -> (nat)) "nat <: nat";
assert blob "DIDL\01\6a\00\01\7c\00\01\00\01\01\00\00"
   == "(opt func \"aaaaa-aa\".\"\")" : (opt func () -> (int)) "int <: int";

// more basic cases
assert blob "DIDL\01\6a\00\01\7d\00\01\00\01\01\00\00"
   == "(opt func \"aaaaa-aa\".\"\")" : (opt func () -> (int)) "nat <: int";
assert blob "DIDL\01\6a\00\01\7f\00\01\00\01\01\00\00"
   == "(null)" : (opt func () -> (nat)) "int </: nat";
assert blob "DIDL\01\6a\00\01\7d\00\01\00\01\01\00\00"
   == "(null)" : (opt func () -> (nat8)) "nat </: nat8";
assert blob "DIDL\01\6a\00\01\7b\00\01\00\01\01\00\00"
   == "(null)" : (opt func () -> (nat)) "nat8 </: nat";

