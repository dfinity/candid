/*
Encoding tests for primitive types
*/

// fundamentally wrong
assert blob ""              !: () "empty";
assert blob "\00\00"        !: () "no magic bytes";
assert blob "DADL"          !: () "wrong magic bytes";
assert blob "DADL\00\00"    !: () "wrong magic bytes";
assert blob "DIDL\80\00\00" !: () "overlong typ table length";
assert blob "DIDL\00\80\00" !: () "overlong arg length";

// nullary input
assert blob "DIDL\00\00"     : ();
assert blob "DIDL\00\00\00" !: () "nullary: too long";
assert blob "DIDL\00\01\7f"  : () "Additional parameters are ignored";

// primitive types
assert blob "DIDL\00\01\7f"     : (null);
assert blob "DIDL\00\01\7f\00" !: (null) "null: too long";
assert blob "DIDL\00\00"       !: (null) "null: missing";

assert blob "DIDL\00\01\7e\00" == "(false)" : (bool) "bool: false";
assert blob "DIDL\00\01\7e\01" == "(true)"  : (bool) "bool: true";
assert blob "DIDL\00\01\7e"                !: (bool) "bool: missing";
assert blob "DIDL\00\01\7e\02"             !: (bool) "bool: out of range";
assert blob "DIDL\00\01\7e\ff"             !: (bool) "bool: out of range";

assert blob "DIDL\00\01\7d\00" == "(0)"         : (nat) "nat: 0";
assert blob "DIDL\00\01\7d\01" == "(1)"         : (nat) "nat: 1";
assert blob "DIDL\00\01\7d\7f" == "(127)"       : (nat) "nat: 0x7f";
assert blob "DIDL\00\01\7d\80\01"  == "(128)"   : (nat) "nat: leb (two bytes)";
assert blob "DIDL\00\01\7d\ff\7f"  == "(16383)" : (nat) "nat: leb (two bytes, all bits)";
assert blob "DIDL\00\01\7d\80"                 !: (nat) "nat: leb too short";
assert blob "DIDL\00\01\7d\80\00"              !: (nat) "nat: leb overlong";
assert blob "DIDL\00\01\7d\ff\00"              !: (nat) "nat: leb overlong";

assert blob "DIDL\00\01\7c\00" == "(0)"         : (int) "int: 0";
assert blob "DIDL\00\01\7c\01" == "(1)"         : (int) "int: 1";
assert blob "DIDL\00\01\7c\7f" == "(-1)"        : (int) "int: -1";
assert blob "DIDL\00\01\7c\40" == "(-64)"       : (int) "int: -64";
assert blob "DIDL\00\01\7c\80\01"  == "(128)"   : (int) "int: leb (two bytes)";
assert blob "DIDL\00\01\7c\80"                 !: (int) "int: leb too short";
assert blob "DIDL\00\01\7c\80\00"              !: (int) "int: leb overlong (0s)";
assert blob "DIDL\00\01\7c\ff\7f"              !: (int) "int: leb overlong (1s)";
assert blob "DIDL\00\01\7c\ff\00" == "(127)"    : (int) "int: leb not overlong when signed";
assert blob "DIDL\00\01\7c\80\7f" == "(-128)"   : (int) "int: leb not overlong when signed";

assert blob "DIDL\00\01\7b\00" == "(0)"         : (nat8) "nat8: 0";
assert blob "DIDL\00\01\7b\01" == "(1)"         : (nat8) "nat8: 1";
assert blob "DIDL\00\01\7b\ff" == "(255)"       : (nat8) "nat8: 255";
assert blob "DIDL\00\01\7b"                    !: (nat8) "nat8: too short";

assert blob "DIDL\00\01\7a\00\00" == "(0)"         : (nat16) "nat16: 0";
assert blob "DIDL\00\01\7a\01\00" == "(1)"         : (nat16) "nat16: 1";
assert blob "DIDL\00\01\7a\ff\00" == "(255)"       : (nat16) "nat16: 255";
assert blob "DIDL\00\01\7a\00\01" == "(256)"       : (nat16) "nat16: 256";
assert blob "DIDL\00\01\7a\ff\ff" == "(65535)"     : (nat16) "nat16: 65535";
assert blob "DIDL\00\01\7a"                       !: (nat16) "nat16: too short";
assert blob "DIDL\00\01\7a\00"                    !: (nat16) "nat16: too short";

assert blob "DIDL\00\01\79\00\00\00\00" == "(0)"          : (nat32) "nat32: 0";
assert blob "DIDL\00\01\79\01\00\00\00" == "(1)"          : (nat32) "nat32: 1";
assert blob "DIDL\00\01\79\ff\00\00\00" == "(255)"        : (nat32) "nat32: 255";
assert blob "DIDL\00\01\79\00\01\00\00" == "(256)"        : (nat32) "nat32: 256";
assert blob "DIDL\00\01\79\ff\ff\00\00" == "(65535)"      : (nat32) "nat32: 65535";
assert blob "DIDL\00\01\79\ff\ff\ff\ff" == "(4294967295)" : (nat32) "nat32: 4294967295";
assert blob "DIDL\00\01\79"                              !: (nat32) "nat32: too short";
assert blob "DIDL\00\01\79\00"                           !: (nat32) "nat32: too short";
assert blob "DIDL\00\01\79\00\00"                        !: (nat32) "nat32: too short";
assert blob "DIDL\00\01\79\00\00\00"                     !: (nat32) "nat32: too short";

assert blob "DIDL\00\01\78\00\00\00\00\00\00\00\00" == "(0)"          : (nat64) "nat64: 0";
assert blob "DIDL\00\01\78\01\00\00\00\00\00\00\00" == "(1)"          : (nat64) "nat64: 1";
assert blob "DIDL\00\01\78\ff\00\00\00\00\00\00\00" == "(255)"        : (nat64) "nat64: 255";
assert blob "DIDL\00\01\78\00\01\00\00\00\00\00\00" == "(256)"        : (nat64) "nat64: 256";
assert blob "DIDL\00\01\78\ff\ff\00\00\00\00\00\00" == "(65535)"      : (nat64) "nat64: 65535";
assert blob "DIDL\00\01\78\ff\ff\ff\ff\00\00\00\00" == "(4294967295)" : (nat64) "nat64: 4294967295";
assert blob "DIDL\00\01\78\ff\ff\ff\ff\ff\ff\ff\ff" == "(18446744073709551615)" : (nat64) "nat64: 18446744073709551615";
assert blob "DIDL\00\01\78"                              !: (nat64) "nat64: too short";
assert blob "DIDL\00\01\78\00"                           !: (nat64) "nat64: too short";
assert blob "DIDL\00\01\78\00\00"                        !: (nat64) "nat64: too short";
assert blob "DIDL\00\01\78\00\00\00"                     !: (nat64) "nat64: too short";
assert blob "DIDL\00\01\78\00\00\00\00"                  !: (nat64) "nat64: too short";
assert blob "DIDL\00\01\78\00\00\00\00\00"               !: (nat64) "nat64: too short";
assert blob "DIDL\00\01\78\00\00\00\00\00\00"            !: (nat64) "nat64: too short";
assert blob "DIDL\00\01\78\00\00\00\00\00\00\00"         !: (nat64) "nat64: too short";


assert blob "DIDL\00\01\77\00" == "(0)"         : (int8) "int8: 0";
assert blob "DIDL\00\01\77\01" == "(1)"         : (int8) "int8: 1";
assert blob "DIDL\00\01\77\ff" == "(-1)"        : (int8) "int8: -1";
assert blob "DIDL\00\01\77"                    !: (int8) "int8: too short";

assert blob "DIDL\00\01\76\00\00" == "(0)"         : (int16) "int16: 0";
assert blob "DIDL\00\01\76\01\00" == "(1)"         : (int16) "int16: 1";
assert blob "DIDL\00\01\76\ff\00" == "(255)"       : (int16) "int16: 255";
assert blob "DIDL\00\01\76\00\01" == "(256)"       : (int16) "int16: 256";
assert blob "DIDL\00\01\76\ff\ff" == "(-1)"        : (int16) "int16: -1";
assert blob "DIDL\00\01\76"                       !: (int16) "int16: too short";
assert blob "DIDL\00\01\76\00"                    !: (int16) "int16: too short";

assert blob "DIDL\00\01\75\00\00\00\00" == "(0)"          : (int32) "int32: 0";
assert blob "DIDL\00\01\75\01\00\00\00" == "(1)"          : (int32) "int32: 1";
assert blob "DIDL\00\01\75\ff\00\00\00" == "(255)"        : (int32) "int32: 255";
assert blob "DIDL\00\01\75\00\01\00\00" == "(256)"        : (int32) "int32: 256";
assert blob "DIDL\00\01\75\ff\ff\00\00" == "(65535)"      : (int32) "int32: 65535";
assert blob "DIDL\00\01\75\ff\ff\ff\ff" == "(-1)"         : (int32) "int32: -1";
assert blob "DIDL\00\01\75"                              !: (int32) "int32: too short";
assert blob "DIDL\00\01\75\00"                           !: (int32) "int32: too short";
assert blob "DIDL\00\01\75\00\00"                        !: (int32) "int32: too short";
assert blob "DIDL\00\01\75\00\00\00"                     !: (int32) "int32: too short";

assert blob "DIDL\00\01\74\00\00\00\00\00\00\00\00" == "(0)"          : (int64) "int64: 0";
assert blob "DIDL\00\01\74\01\00\00\00\00\00\00\00" == "(1)"          : (int64) "int64: 1";
assert blob "DIDL\00\01\74\ff\00\00\00\00\00\00\00" == "(255)"        : (int64) "int64: 255";
assert blob "DIDL\00\01\74\00\01\00\00\00\00\00\00" == "(256)"        : (int64) "int64: 256";
assert blob "DIDL\00\01\74\ff\ff\00\00\00\00\00\00" == "(65535)"      : (int64) "int64: 65535";
assert blob "DIDL\00\01\74\ff\ff\ff\ff\00\00\00\00" == "(4294967295)" : (int64) "int64: 4294967295";
assert blob "DIDL\00\01\74\ff\ff\ff\ff\ff\ff\ff\ff" == "(-1)"         : (int64) "int64: -1";
assert blob "DIDL\00\01\74"                              !: (int64) "int64: too short";
assert blob "DIDL\00\01\74\00"                           !: (int64) "int64: too short";
assert blob "DIDL\00\01\74\00\00"                        !: (int64) "int64: too short";
assert blob "DIDL\00\01\74\00\00\00"                     !: (int64) "int64: too short";
assert blob "DIDL\00\01\74\00\00\00\00"                  !: (int64) "int64: too short";
assert blob "DIDL\00\01\74\00\00\00\00\00"               !: (int64) "int64: too short";
assert blob "DIDL\00\01\74\00\00\00\00\00\00"            !: (int64) "int64: too short";
assert blob "DIDL\00\01\74\00\00\00\00\00\00\00"         !: (int64) "int64: too short";

// TODO: float


assert blob "DIDL\00\01\71\00" == "(\"\")"             : (text) "text: empty string";
assert blob "DIDL\00\01\71\06Motoko" == "(\"Motoko\")" : (text) "text: Motoko";
assert blob "DIDL\00\01\71\05Motoko"                  !: (text) "text: too long";
assert blob "DIDL\00\01\71\07Motoko"                  !: (text) "text: too short";
assert blob "DIDL\00\01\71\86\00Motoko"               !: (text) "text: too overlong length leb";
assert blob "DIDL\00\01\71\03\e2\98\83" == "(\"☃\")"   : (text) "text: Unicode";
assert "(\"\\u{2603}\")" == "(\"☃\")"                  : (text) "text: Unicode escape";
assert "(\"\\u{2603\")"                               !: (text) "text: Unicode escape (unclosed)";
assert blob "DIDL\00\01\71\03\e2\28\a1"               !: (text) "text: Invalid utf8";
assert blob "DIDL\00\01\71\02\e2\98\83"               !: (text) "text: Unicode overshoots";
assert blob "DIDL\00\01\71\06\09\0A\0D\22\27\5C" == "(\"\\t\\n\\r\\\"\\\'\\\\\")"  : (text) "text: Escape sequences";


assert blob "DIDL\00\01\70" == blob "DIDL\00\01\7f"          : (reserved) "reserved from null";
assert blob "DIDL\00\01\70" == blob "DIDL\00\01\7e\01"       : (reserved) "reserved from bool";
assert blob "DIDL\00\01\70" == blob "DIDL\00\01\7d\80\01"    : (reserved) "reserved from nat";
assert blob "DIDL\00\01\70" == blob "DIDL\00\01\71\06Motoko" : (reserved) "reserved from text";
assert blob "DIDL\00\01\71\05Motoko"    !: (reserved) "reserved from too short text";
assert blob "DIDL\00\01\71\03\e2\28\a1" !: (reserved) "reserved from invalid utf8 text"; // Do we really require this to fail?

assert blob "DIDL\00\01\6f"  !: (empty) "cannot decode empty type";

