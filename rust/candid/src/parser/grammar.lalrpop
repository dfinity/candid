use super::value::{IDLField, IDLValue, IDLArgs};
use super::typing::{check_unique, TypeEnv};
use super::types::{IDLType, PrimType, TypeField, FuncType, FuncMode, Binding, Dec, IDLProg, IDLTypes};
use super::test::{Assert, Input, Test};
use super::token::{Token, error, error2, LexicalError, Span};
use crate::{idl_hash, Principal, types::Label};

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;
    enum Token {
        "decimal" => Token::Decimal(<String>),
        "hex" => Token::Hex(<String>),
        "float" => Token::Float(<String>),
        "bool" => Token::Boolean(<bool>),
        "text" => Token::Text(<String>),
        "id" => Token::Id(<String>),
        "null" => Token::Null,
        "opt" => Token::Opt,
        "vec" => Token::Vec,
        "record" => Token::Record,
        "variant" => Token::Variant,
        "func" => Token::Func,
        "service" => Token::Service,
        "oneway" => Token::Oneway,
        "query" => Token::Query,
        "blob" => Token::Blob,
        "type" => Token::Type,
        "import" => Token::Import,
        "principal" => Token::Principal,
        "sign" => Token::Sign(<char>),
        "=" => Token::Equals,
        "==" => Token::TestEqual,
        "!=" => Token::NotEqual,
        "!:" => Token::NotDecode,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "," => Token::Comma,
        ";" => Token::Semi,
        ":" => Token::Colon,
        "->" => Token::Arrow,
    }
}


// Value
pub Args: IDLArgs = "(" <SepBy<AnnVal, ",">> ")" => IDLArgs { args: <> };

pub Arg: IDLValue = {
    "bool" => IDLValue::Bool(<>),
    NumLiteral => <>,
    Text => IDLValue::Text(<>),
    Bytes => {
        let values: Vec<_> = <>.into_iter().map(|v| IDLValue::Nat8(v)).collect();
        IDLValue::Vec(values)
    },
    "null" => IDLValue::Null,
    "opt" <Arg> => IDLValue::Opt(Box::new(<>)),
    "vec" "{" <SepBy<Arg, ";">> "}" => IDLValue::Vec(<>),
    "record" "{" <SepBy<RecordField, ";">> "}" =>? {
        let mut id: u32 = 0;
        let mut fs: Vec<IDLField> = <>.into_iter().map(|f| {
          match f.id {
            Label::Unnamed(_) => {
              id = id + 1;
              IDLField { id: Label::Unnamed(id - 1), val: f.val }
            }
            _ => {
              id = f.id.get_id() + 1;
              f
            }
          }
        }).collect();
        fs.sort_unstable_by_key(|IDLField { id, .. }| id.get_id());
        check_unique(fs.iter().map(|f| &f.id)).map_err(error)?;
        Ok(IDLValue::Record(fs))
    },
    "variant" "{" <VariantField> "}" => IDLValue::Variant(Box::new(<>), 0),
    "principal" <Text> =>? Ok(IDLValue::Principal(Principal::from_text(<>).map_err(error)?)),
    "(" <AnnVal> ")" => <>,
}

Text: String = {
    Sp<"text"> =>? {
        if std::str::from_utf8(<>.0.as_bytes()).is_err() {
          Err(error2("Not valid unicode text", <>.1))
        } else {
          Ok(<>.0)
        }
    }
}

Bytes: Vec<u8> = {
    "blob" <"text"> => <>.into_bytes(),
}

Number: String = {
    "decimal" => <>,
    "hex" => num_bigint::BigInt::parse_bytes(<>.as_bytes(), 16).unwrap().to_str_radix(10),
}

AnnVal: IDLValue = {
    <Arg> => <>,
    <arg:Arg> ":" <typ:Typ> =>? {
        let env = TypeEnv::new();
        let typ = env.ast_to_type(&typ).map_err(error)?;
        arg.annotate_type(true, &env, &typ).map_err(error)
    }
}

NumLiteral: IDLValue = {
    <sign:"sign"?> <n:Number> => {
        let num = match sign {
            Some('-') => format!("-{}", n),
            _ => n,
        };
        IDLValue::Number(num)
    },
    <sign:"sign"?> <n:"float"> =>? {
        let num = match sign {
            Some('-') => format!("-{}", n),
            _ => n,
        };
        let f = num.parse::<f64>().map_err(|_| error("not a float"))?;
        Ok(IDLValue::Float64(f))
    },
}

FieldId: u32 = {
    Sp<"decimal"> =>? <>.0.parse::<u32>().map_err(|_| error2("field id out of u32 range", <>.1)),
    Sp<"hex"> =>? u32::from_str_radix(&<>.0, 16).map_err(|_| error2("field id out of u32 range", <>.1)),
}

Field: IDLField = {
    <n:FieldId> "=" <v:Arg> =>? Ok(IDLField { id: Label::Id(n), val: v }),
    <n:Name> "=" <v:Arg> => IDLField { id: Label::Named(n), val: v },
}

VariantField: IDLField = {
    Field => <>,
    Name => IDLField { id: Label::Named(<>), val: IDLValue::Null },
    FieldId =>? Ok(IDLField { id: Label::Id(<>), val: IDLValue::Null }),
}

RecordField: IDLField = {
    Field => <>,
    Arg => IDLField { id: Label::Unnamed(0), val:<> },
}

// Type
pub Typs: IDLTypes = TupTyp => IDLTypes { args:<> };

pub Typ: IDLType = {
    PrimTyp => <>,
    "opt" <Typ> => IDLType::OptT(Box::new(<>)),
    "vec" <Typ> => IDLType::VecT(Box::new(<>)),
    "blob" => IDLType::VecT(Box::new(IDLType::PrimT(PrimType::Nat8))),
    "record" "{" <SepBy<RecordFieldTyp, ";">> "}" =>? {
        let mut id: u32 = 0;
        let mut fs: Vec<TypeField> = <>.iter().map(|f| {
          let label = match f.label {
              Label::Unnamed(_) => { id = id + 1; Label::Unnamed(id - 1) },
              ref l => { id = l.get_id() + 1; l.clone() },
          };
          TypeField { label, typ: f.typ.clone() }
        }).collect();
        fs.sort_unstable_by_key(|TypeField { label, .. }| label.get_id());
        check_unique(fs.iter().map(|f| &f.label)).map_err(error)?;
        Ok(IDLType::RecordT(fs))
    },
    "variant" "{" <mut fs:SepBy<VariantFieldTyp, ";">> "}" =>? {
        fs.sort_unstable_by_key(|TypeField { label, .. }| label.get_id());
        check_unique(fs.iter().map(|f| &f.label)).map_err(error)?;
        Ok(IDLType::VariantT(fs))
    },
    "func" <FuncTyp> => IDLType::FuncT(<>),
    "service" <ActorTyp> => IDLType::ServT(<>),
    "principal" => IDLType::PrincipalT,
}

PrimTyp: IDLType = {
    "null" => IDLType::PrimT(PrimType::Null),
    "id" => {
      match PrimType::str_to_enum(&<>) {
        Some(p) => IDLType::PrimT(p),
        None => IDLType::VarT(<>),
      }
    },
}

FieldTyp: TypeField = {
    <n:FieldId> ":" <t:Typ> =>? Ok(TypeField { label: Label::Id(n), typ: t }),
    <n:Name> ":" <t:Typ> => TypeField { label: Label::Named(n), typ: t },
}

RecordFieldTyp: TypeField = {
    FieldTyp => <>,
    Typ => TypeField { label: Label::Unnamed(0), typ: <> },
}

VariantFieldTyp: TypeField = {
    FieldTyp => <>,
    Name => TypeField { label: Label::Named(<>), typ: IDLType::PrimT(PrimType::Null) },
    FieldId =>? Ok(TypeField { label: Label::Id(<>), typ: IDLType::PrimT(PrimType::Null) }),
}

TupTyp: Vec<IDLType> = "(" <SepBy<ArgTyp, ",">> ")" => <>;

FuncTyp: FuncType = {
    <args:TupTyp> "->" <rets:TupTyp> <modes:FuncMode*> =>
        FuncType { modes, args, rets },
}

ArgTyp: IDLType = {
    Typ => <>,
    Name ":" <Typ> => <>,
}

FuncMode: FuncMode = {
    "oneway" => FuncMode::Oneway,
    "query" => FuncMode::Query,
}

ActorTyp: Vec<Binding> = {
    "{" <mut fs:SepBy<MethTyp, ";">> "}" =>? {
        fs.sort_unstable_by_key(|Binding { id, .. }| idl_hash(id));
        let labs: Vec<_> = fs.iter().map(|f| Label::Named(f.id.clone())).collect();
        check_unique(labs.iter()).map_err(error)?;
        Ok(fs)
    }
}

MethTyp: Binding = {
    <n:Name> ":" <f:FuncTyp> => Binding { id: n, typ: IDLType::FuncT(f) },
    <n:Name> ":" <id:"id"> => Binding { id: n, typ: IDLType::VarT(id) },
}

// Type declarations
Def: Dec = {
    "type" <id:"id"> "=" <t:Typ> => Dec::TypD(Binding { id: id, typ: t }),
    "import" <Text> => Dec::ImportD(<>),
}

Actor: IDLType = {
    "service" "id"? ":" <t:ActorTyp> => IDLType::ServT(t),
    "service" "id"? ":" <t:"id"> => IDLType::VarT(t),
}

pub IDLProg: IDLProg = {
    <decs:SepBy<Def, ";">> <actor:Actor?> => IDLProg { decs, actor }
}

// Test file

Input: Input = {
    Text => Input::Text(<>),
    Bytes => Input::Blob(<>),
}

Assert: Assert = <id:"id"> <assert:Assertion> =>? {
    if id != "assert" {
        Err(error("not an assert"))
    } else { Ok(assert) }
};

Assertion: Assert = {
    <left:Input> ":" <typ:TupTyp> <desc:Text?> => Assert { left, right: None, typ, pass: true, desc },
    <left:Input> "!:" <typ:TupTyp> <desc:Text?> => Assert { left, right: None, typ, pass: false, desc },
    <left:Input> "==" <right:Input> ":" <typ:TupTyp> <desc:Text?> => Assert { left, right: Some(right), typ, pass: true, desc },
    <left:Input> "!=" <right:Input> ":" <typ:TupTyp> <desc:Text?> => Assert { left, right: Some(right), typ, pass: false, desc },
}

pub Test: Test = {
    <defs:SepBy<Def, ";">> <asserts:SepBy<Assert, ";">> => Test { defs, asserts },
}

// Common util
Name: String = {
    "id" => <>,
    Text => <>,
}

// Also allows trailing separator
#[inline]
SepBy<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

#[inline]
Sp<T>: (T, Span) =
    <l: @L> <t: T> <r: @R> => (t, l..r);
