type list = opt node;
type node = record { head : nat; tail : list };
type o = opt o;
type s = service { f : t; g : (list) -> (tree, stream) };
type stream = opt record { head : nat; next : func () -> (stream) query };
type t = func (s) -> ();
type tree = variant {
  branch : record { val : int; left : tree; right : tree };
  leaf : int;
};
service : {
  f_ : (o) -> (o);
  field : (record { test : nat16; 1_291_438_163 : nat8 }) -> (record {});
  fieldnat : (record { 2 : int; "2" : nat }) -> (record { int });
  "oneway" : (nat8) -> () oneway;
  oneway_ : (nat8) -> () oneway;
  "query" : (vec nat8) -> (vec nat8) query;
  return : (o) -> (o);
  "service" : t;
  tuple : (record { int; vec nat8; text }) -> (record { int; nat8 });
  "variant" : (variant { A; B; C; D : float64 }) -> ();
}
