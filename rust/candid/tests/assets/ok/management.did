type bitcoin_address = text;
type bitcoin_network = variant { mainnet; testnet };
type block_hash = vec nat8;
type canister_id = principal;
type canister_settings = record {
  freezing_threshold : opt nat;
  controllers : opt vec principal;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type definite_canister_settings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type ecdsa_curve = variant { secp256k1 };
type get_balance_request = record {
  network : bitcoin_network;
  address : bitcoin_address;
  min_confirmations : opt nat32;
};
type get_current_fee_percentiles_request = record { network : bitcoin_network };
type get_utxos_request = record {
  network : bitcoin_network;
  filter : opt variant { page : vec nat8; min_confirmations : nat32 };
  address : bitcoin_address;
};
type get_utxos_response = record {
  next_page : opt vec nat8;
  tip_height : nat32;
  tip_block_hash : block_hash;
  utxos : vec utxo;
};
type http_header = record { value : text; name : text };
type http_response = record {
  status : nat;
  body : vec nat8;
  headers : vec http_header;
};
type millisatoshi_per_byte = nat64;
type outpoint = record { txid : vec nat8; vout : nat32 };
type satoshi = nat64;
type send_transaction_request = record {
  transaction : vec nat8;
  network : bitcoin_network;
};
type user_id = principal;
type utxo = record { height : nat32; value : satoshi; outpoint : outpoint };
type wasm_module = vec nat8;
service : {
  bitcoin_get_balance : (get_balance_request) -> (satoshi);
  bitcoin_get_current_fee_percentiles : (
      get_current_fee_percentiles_request,
    ) -> (vec millisatoshi_per_byte);
  bitcoin_get_utxos : (get_utxos_request) -> (get_utxos_response);
  bitcoin_send_transaction : (send_transaction_request) -> ();
  canister_status : (record { canister_id : canister_id }) -> (
      record {
        status : variant { stopped; stopping; running };
        memory_size : nat;
        cycles : nat;
        settings : definite_canister_settings;
        idle_cycles_burned_per_day : nat;
        module_hash : opt vec nat8;
      },
    );
  create_canister : (record { settings : opt canister_settings }) -> (
      record { canister_id : canister_id },
    );
  delete_canister : (record { canister_id : canister_id }) -> ();
  deposit_cycles : (record { canister_id : canister_id }) -> ();
  ecdsa_public_key : (
      record {
        key_id : record { name : text; curve : ecdsa_curve };
        canister_id : opt canister_id;
        derivation_path : vec vec nat8;
      },
    ) -> (record { public_key : vec nat8; chain_code : vec nat8 });
  http_request : (
      record {
        url : text;
        method : variant { get; head; post };
        max_response_bytes : opt nat64;
        body : opt vec nat8;
        transform : opt record {
          function : func (
              record { context : vec nat8; response : http_response },
            ) -> (http_response) query;
          context : vec nat8;
        };
        headers : vec http_header;
      },
    ) -> (http_response);
  install_code : (
      record {
        arg : vec nat8;
        wasm_module : wasm_module;
        mode : variant { reinstall; upgrade; install };
        canister_id : canister_id;
      },
    ) -> ();
  provisional_create_canister_with_cycles : (
      record {
        settings : opt canister_settings;
        specified_id : opt canister_id;
        amount : opt nat;
      },
    ) -> (record { canister_id : canister_id });
  provisional_top_up_canister : (
      record { canister_id : canister_id; amount : nat },
    ) -> ();
  raw_rand : () -> (vec nat8);
  sign_with_ecdsa : (
      record {
        key_id : record { name : text; curve : ecdsa_curve };
        derivation_path : vec vec nat8;
        message_hash : vec nat8;
      },
    ) -> (record { signature : vec nat8 });
  start_canister : (record { canister_id : canister_id }) -> ();
  stop_canister : (record { canister_id : canister_id }) -> ();
  uninstall_code : (record { canister_id : canister_id }) -> ();
  update_settings : (
      record { canister_id : principal; settings : canister_settings },
    ) -> ();
}
