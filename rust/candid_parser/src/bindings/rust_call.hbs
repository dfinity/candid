// This is an experimental feature to generate Rust binding from Candid.
// You may want to manually adjust some of the types.
#![allow(dead_code, unused_imports)]
use {{candid_crate}}::{self, CandidType, Deserialize, Principal};
use ic_cdk::call::{Call, CallResult as Result};

{{type_defs}}
{{#if methods}}
{{#each actor_docs}}
{{../doc_comment_prefix}}{{this}}
{{/each}}
pub struct {{PascalCase service_name}}(pub Principal);
impl {{PascalCase service_name}} {
  {{#each methods}}
  {{#each this.docs}}
  {{../../doc_comment_prefix}}{{this}}
  {{/each}}
  pub async fn {{this.name}}(&self{{#each this.args}}, {{this.0}}: &{{this.1}}{{/each}}) -> Result<({{#each this.rets}}{{this}},{{/each}})> {
    Ok(Call::bounded_wait(self.0, "{{escape_debug this.original_name}}"){{#if (eq this.args_len 0)}}{{else}}{{#if (eq this.args_len 1)}}.with_arg({{this.args.0.0}}){{else}}.with_args(&({{#each this.args}}{{this.0}}{{#unless @last}}, {{/unless}}{{/each}})){{/if}}{{/if}}.await?.candid()?)
  }
  {{/each}}
}
{{#if canister_id}}
{{doc_comment_prefix}}Canister ID: `{{canister_id}}`
pub const CANISTER_ID : Principal = Principal::from_slice(&[{{principal_slice canister_id}}]);
pub const {{snake_case service_name}} : {{PascalCase service_name}} = {{PascalCase service_name}}(CANISTER_ID);
{{/if}}
{{/if}}
{{#if tests}}
{{tests}}
{{/if}}
