type A = B;
type B = opt A;
type node = record { head : nat; tail : list };
type list = opt node;
type tree = variant {
  branch : record { val : int; left : tree; right : tree };
  leaf : int;
};
// Doc comment for service id
type s = service { f : t; g : (list) -> (B, tree, stream) };
type t = func (server : s) -> ();
type stream = opt record { head : nat; next : func () -> (stream) query };
service : s
