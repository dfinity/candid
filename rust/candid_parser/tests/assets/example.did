import service "recursion.did";
import "import/a.did";
import service "import/b/b.did";
// Doc comment for prim type
type my_type = principal;
// Doc comment for List
type List = opt record {
  // Doc comment for List head
  head: int;
  // Doc comment for List tail
  tail: List
};
type f = func (List, func (int32) -> (int64)) -> (opt List, res);
// Doc comment for broker service
type broker = service {
  find : (name: text) ->
    (service {up:() -> (); current:() -> (nat32)});
};
// Doc comment for nested type
type nested = record {
  nat;
  nat;
  // Doc comment for nested record
  record {nat;int;};
  record { nat; 0x2a:nat; nat8; };
  42:nat;
  40:nat;
  variant{ A; 0x2a; B; C };
};
// Doc comment for res type
type res = variant {
  // Doc comment for Ok variant
  Ok: record{int;nat};
  // Doc comment for Err variant
  Err: record{
    // Doc comment for error field in Err variant,
    // on multiple lines
    error: text
  }
};
type nested_res = variant { Ok: variant { Ok; Err }; Err: variant {
  // Doc comment for Ok in nested variant
  Ok: record { content: text };
  // Doc comment for Err in nested variant
  Err: record { int }
} };
// Doc comment for nested_records
type nested_records = record {
  // Doc comment for nested_records field nested
  nested: opt record {
    // Doc comment for nested_records field nested_field
    nested_field: text
  }
};
type my_variant = variant {
  // Doc comment for my_variant field a
  a: record {
    // Doc comment for my_variant field a field b
    b: text;
  };
  // Doc comment for my_variant field c
  c: opt record {
    // Doc comment for my_variant field c field d
    d: text;
  }
}

// Doc comment for service
service server : {
  // Doc comment for f1 method of service
  f1 : (list, test: blob, opt bool) -> () oneway;
  g1 : (my_type, List, opt List, nested) -> (int, broker, nested_res) query;
  h : (vec opt text, variant { A: nat; B: opt text }, opt List) -> (
    record {
      // Doc comment for id field in h method return, currently ignored
      id: nat;
      // Doc comment for 0x2a field in h method return, currently ignored
      0x2a: record {};
    }
  );
  // Doc comment for i method of service
  i : f;
  x : (a,b) -> (opt a, opt b, variant { Ok: record { result: text }; Err: variant {a;b} }) composite_query;
  y : (nested_records) -> (record { nested_records; my_variant }) query;
}
